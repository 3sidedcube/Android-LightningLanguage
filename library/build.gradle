apply plugin: 'com.android.library'

android {
	compileSdkVersion 25
	buildToolsVersion "25.0.2"

	defaultConfig {
		minSdkVersion 16
		targetSdkVersion 25
	}

	lintOptions {
		abortOnError false
	}
}

dependencies {
	compile 'com.android.support:support-annotations:25.1.0'
	compile 'org.projectlombok:lombok:1.16.8'
	compile 'com.google.code.gson:gson:2.6.2'

	compile 'com.3sidedcube.storm:util:0.4.2'
}

def srcJava = 'src/main/java'
def srcDelomboked = 'build/src-delomboked/main/java'

task delombok(type: Exec) {
	commandLine 'java', '-jar', 'libs/lombok.jar', 'delombok', 'src', '-d', 'build/src-delomboked'
}

def findClasses(File path)
{
	List<File> found = new ArrayList<File>();

	for (File file : path.listFiles())
	{
		if (file.getName().equalsIgnoreCase("classes.jar"))
		{
			found.add(file);
		}

		if (file.isDirectory())
		{
			found.addAll(findClasses(file));
		}
	}

	return found;
}

android.libraryVariants.all { variant ->
	task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
		description "Generates Javadoc for $variant.name."

		setDependsOn(['build', 'delombok'])
		source = srcDelomboked

		ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
		classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

		List<String> jars = new ArrayList<String>();
		File dependencies = new File("build/intermediates/exploded-aar/")
		for (File folder : dependencies.listFiles())
		{
			List<File> found = findClasses(folder);
			for (File foundFile : found)
			{
				classpath += files(foundFile.getAbsolutePath())
			}
		}

		options.links("http://3sidedcube.github.io/Android-LightningUtil/", "com.cube.storm.util");
		options.links("http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/", "com.google.gson")
		options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
		options.links("http://docs.oracle.com/javase/7/docs/api/");
		options.encoding("utf-8")

		// exclude generated files
		exclude '**/BuildConfig.java'
		exclude '**/R.java'

		// exclude any internal packages
		exclude '**/com/acme/sdk/api/**'
	}
}

//apply from: '../gradle/sonatype.gradle'
apply from: '../gradle/artifactory.gradle'
